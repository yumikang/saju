#!/usr/bin/env node

// Socket.IO ÏÑúÎ≤Ñ ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏

import { io } from 'socket.io-client';

console.log('üß™ Testing Socket.IO server connection...');

// Î©îÏù∏ ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Ïó∞Í≤∞
const socket = io('http://localhost:3001', {
  auth: {
    userId: 'test_user_123'
  }
});

// ÏûëÎ™Ö ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Ïó∞Í≤∞
const namingSocket = io('http://localhost:3001/naming', {
  auth: {
    userId: 'test_user_123'
  }
});

// ÎåÄÍ∏∞Ïó¥ ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Ïó∞Í≤∞
const queueSocket = io('http://localhost:3001/queue', {
  auth: {
    userId: 'test_user_123'
  }
});

// Î©îÏù∏ ÏÜåÏºì Ïù¥Î≤§Ìä∏
socket.on('connect', () => {
  console.log('‚úÖ Connected to main namespace');
});

socket.on('connected', (data) => {
  console.log('üìã Connection info:', data);
});

socket.on('disconnect', (reason) => {
  console.log('‚ùå Disconnected from main namespace:', reason);
});

// ÏûëÎ™Ö ÏÜåÏºì Ïù¥Î≤§Ìä∏
namingSocket.on('connect', () => {
  console.log('‚úÖ Connected to /naming namespace');
  
  // ÏûëÎ™Ö ÏãúÏûë ÌÖåÏä§Ìä∏
  console.log('üöÄ Starting naming test...');
  namingSocket.emit('naming:start', {
    requestId: 'test_req_' + Date.now(),
    birthDate: '1990-01-01',
    gender: 'M'
  });
});

namingSocket.on('naming:started', (data) => {
  console.log('üéØ Naming started:', data);
});

namingSocket.on('naming:progress', (data) => {
  console.log(`üìä Progress: Step ${data.step} - ${data.name} (${data.progress}%)`);
});

namingSocket.on('naming:complete', (data) => {
  console.log('üéâ Naming complete:', data);
  
  // ÌÖåÏä§Ìä∏ ÏôÑÎ£å ÌõÑ Ïó∞Í≤∞ Ï¢ÖÎ£å
  setTimeout(() => {
    console.log('üîå Closing connections...');
    socket.close();
    namingSocket.close();
    queueSocket.close();
    process.exit(0);
  }, 1000);
});

namingSocket.on('naming:error', (data) => {
  console.error('‚ùå Naming error:', data);
});

// ÎåÄÍ∏∞Ïó¥ ÏÜåÏºì Ïù¥Î≤§Ìä∏
queueSocket.on('connect', () => {
  console.log('‚úÖ Connected to /queue namespace');
  
  // ÎåÄÍ∏∞Ïó¥ Ï∞∏Í∞Ä ÌÖåÏä§Ìä∏
  queueSocket.emit('queue:join', {
    userId: 'test_user_123'
  });
});

queueSocket.on('queue:status', (data) => {
  console.log('üìä Queue status:', data);
});

queueSocket.on('queue:update', (data) => {
  console.log('üîÑ Queue update:', data);
});

queueSocket.on('queue:ready', (data) => {
  console.log('‚ú® Queue ready:', data);
});

// ÏóêÎü¨ Ìï∏Îì§ÎßÅ
socket.on('connect_error', (error) => {
  console.error('Connection error:', error.message);
  process.exit(1);
});

// 30Ï¥à ÌõÑ ÏûêÎèô Ï¢ÖÎ£å
setTimeout(() => {
  console.log('‚è±Ô∏è Test timeout - closing connections');
  socket.close();
  namingSocket.close();
  queueSocket.close();
  process.exit(0);
}, 30000);