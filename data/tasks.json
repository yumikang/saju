{
  "tasks": [
    {
      "id": "f60ceece-fbd3-4021-9327-5520886ef119",
      "name": "Socket.IO 서버 설정 및 Express 통합",
      "description": "별도 포트(3001)에서 실행될 Socket.IO 서버를 설정하고 Express와 통합합니다. CORS 설정으로 Remix 서버(3000)와 통신을 가능하게 하며, Redis를 통한 세션 공유를 구성합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-08-13T06:04:08.805Z",
      "updatedAt": "2025-08-13T06:10:01.453Z",
      "relatedFiles": [
        {
          "path": "package.json",
          "type": "REFERENCE",
          "description": "Socket.IO 패키지 추가"
        },
        {
          "path": "app/socket/server.ts",
          "type": "CREATE",
          "description": "Socket.IO 서버 메인 파일"
        },
        {
          "path": ".env",
          "type": "TO_MODIFY",
          "description": "SOCKET_PORT=3001 추가"
        }
      ],
      "implementationGuide": "1. app/socket/server.ts 파일 생성\n2. Express 서버 초기화 및 Socket.IO 통합\n3. CORS 설정: origin: http://localhost:3000\n4. Redis 어댑터 설정 (이미 설치된 redis 패키지 활용)\n5. 네임스페이스 구성: /naming, /queue\n6. 미들웨어 설정: 인증, rate limiting\n7. pseudocode:\n   - createServer(express)\n   - new Server(httpServer, corsOptions)\n   - io.adapter(createAdapter(pubClient, subClient))\n   - io.on('connection', handleConnection)",
      "verificationCriteria": "Socket.IO 서버가 3001 포트에서 실행되고, Remix 서버와 CORS 통신이 가능하며, Redis 연결이 정상 작동해야 함",
      "analysisResult": "Remix 기반 사주 작명 플랫폼에 Socket.IO를 통합하여 실시간 기능을 구현합니다. AI 작명 진행상황 표시, 대기열 관리, 실시간 피드백을 제공하며, 기존 아키텍처와 완벽히 통합됩니다.",
      "summary": "Socket.IO 서버를 포트 3001에서 성공적으로 설정하고 실행했습니다. Express와 통합되었으며, CORS 설정으로 Remix 서버(3000)와 통신 가능하도록 구성했습니다. 메인, /naming, /queue 네임스페이스가 구성되었고, 인증 및 rate limiting 미들웨어가 구현되었습니다.",
      "completedAt": "2025-08-13T06:10:01.450Z"
    },
    {
      "id": "fbc03b1c-fb4c-4efb-85f3-bc88086f8f92",
      "name": "실시간 이벤트 핸들러 구현",
      "description": "작명 프로세스의 각 단계별 이벤트 핸들러를 구현합니다. naming:start, naming:progress, naming:complete, naming:error, queue:update 등의 이벤트를 처리합니다.",
      "status": "in_progress",
      "dependencies": [
        {
          "taskId": "f60ceece-fbd3-4021-9327-5520886ef119"
        }
      ],
      "createdAt": "2025-08-13T06:04:08.805Z",
      "updatedAt": "2025-08-13T06:11:50.219Z",
      "relatedFiles": [
        {
          "path": "app/socket/handlers/naming.handler.ts",
          "type": "CREATE",
          "description": "이벤트 핸들러"
        },
        {
          "path": "app/lib/ai-naming.server.ts",
          "type": "REFERENCE",
          "description": "AI 작명 로직 연동"
        },
        {
          "path": "app/socket/types.ts",
          "type": "CREATE",
          "description": "이벤트 타입 정의"
        }
      ],
      "implementationGuide": "1. app/socket/handlers/naming.handler.ts 생성\n2. 이벤트 타입 정의 (TypeScript interface)\n3. 각 이벤트별 핸들러 함수 구현\n4. AI 작명 프로세스와 연동 (ai-naming.server.ts 활용)\n5. 진행상황 브로드캐스팅 로직\n6. pseudocode:\n   - on('naming:start', validateRequest, startNaming)\n   - emit('naming:progress', { step, progress, message })\n   - on('naming:complete', saveResult, notifyClient)\n7. 에러 핸들링 및 재시도 로직",
      "verificationCriteria": "모든 이벤트가 정상적으로 발생하고 처리되며, 클라이언트에 실시간으로 전달되어야 함",
      "analysisResult": "Remix 기반 사주 작명 플랫폼에 Socket.IO를 통합하여 실시간 기능을 구현합니다. AI 작명 진행상황 표시, 대기열 관리, 실시간 피드백을 제공하며, 기존 아키텍처와 완벽히 통합됩니다."
    },
    {
      "id": "b9b0ebec-d052-48c6-a90f-59eddd7bd485",
      "name": "클라이언트 Socket 연결 훅 구현",
      "description": "React 컴포넌트에서 사용할 useSocket 커스텀 훅을 구현합니다. 자동 재연결, 오프라인 처리, 메모리 관리 기능을 포함합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-08-13T06:04:08.805Z",
      "updatedAt": "2025-08-13T06:17:56.835Z",
      "relatedFiles": [
        {
          "path": "app/hooks/useSocket.ts",
          "type": "CREATE",
          "description": "Socket 연결 훅"
        },
        {
          "path": "app/hooks/useMemoryCleanup.ts",
          "type": "REFERENCE",
          "description": "메모리 관리 활용"
        },
        {
          "path": "package.json",
          "type": "TO_MODIFY",
          "description": "socket.io-client 추가"
        }
      ],
      "implementationGuide": "1. app/hooks/useSocket.ts 생성\n2. Socket.IO 클라이언트 초기화\n3. 연결 상태 관리 (connected, connecting, disconnected)\n4. 자동 재연결 로직 (exponential backoff)\n5. 이벤트 리스너 관리 및 cleanup\n6. 기존 useMemoryCleanup.ts 활용\n7. pseudocode:\n   - const socket = io(SOCKET_URL, options)\n   - useEffect(() => { connect; return disconnect })\n   - const emit = useCallback((event, data) => {})\n   - return { socket, connected, emit, on, off }",
      "verificationCriteria": "Socket 연결이 안정적이고, 네트워크 변경 시 자동 재연결되며, 메모리 누수가 없어야 함",
      "analysisResult": "Remix 기반 사주 작명 플랫폼에 Socket.IO를 통합하여 실시간 기능을 구현합니다. AI 작명 진행상황 표시, 대기열 관리, 실시간 피드백을 제공하며, 기존 아키텍처와 완벽히 통합됩니다.",
      "summary": "Successfully implemented comprehensive useSocket React hooks with auto-reconnection, offline handling, memory management, and TypeScript type safety for Socket.IO client connections",
      "completedAt": "2025-08-13T06:17:56.835Z"
    },
    {
      "id": "8198d1a3-d4e0-4ec9-8903-d216f7b130b8",
      "name": "Zustand 스토어와 실시간 상태 동기화",
      "description": "기존 Zustand 스토어를 확장하여 Socket.IO 이벤트와 실시간으로 동기화합니다. 작명 진행상황과 대기열 상태를 전역 상태로 관리합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "b9b0ebec-d052-48c6-a90f-59eddd7bd485"
        }
      ],
      "createdAt": "2025-08-13T06:04:08.805Z",
      "updatedAt": "2025-08-14T01:35:25.357Z",
      "relatedFiles": [
        {
          "path": "app/store/realtime.store.ts",
          "type": "CREATE",
          "description": "실시간 상태 스토어"
        },
        {
          "path": "app/hooks/useSocket.ts",
          "type": "REFERENCE",
          "description": "Socket 훅 연동"
        }
      ],
      "implementationGuide": "1. app/store/realtime.store.ts 생성\n2. 실시간 상태 인터페이스 정의\n3. Socket 이벤트와 store 액션 매핑\n4. 낙관적 업데이트 구현\n5. pseudocode:\n   - interface RealtimeState { progress, queue, errors }\n   - const useRealtimeStore = create((set) => {})\n   - socket.on('naming:progress', (data) => set({ progress: data }))\n   - middleware for optimistic updates\n6. DevTools 연동",
      "verificationCriteria": "Socket 이벤트가 Zustand 스토어에 실시간 반영되고, 컴포넌트가 자동 리렌더링되어야 함",
      "analysisResult": "Remix 기반 사주 작명 플랫폼에 Socket.IO를 통합하여 실시간 기능을 구현합니다. AI 작명 진행상황 표시, 대기열 관리, 실시간 피드백을 제공하며, 기존 아키텍처와 완벽히 통합됩니다.",
      "summary": "Zustand 스토어와 Socket.IO 실시간 상태 동기화를 성공적으로 구현했습니다. DevTools 연동, 낙관적 업데이트, 메트릭 추적 기능을 포함한 완벽한 실시간 상태 관리 시스템을 구축했습니다.",
      "completedAt": "2025-08-14T01:35:25.356Z"
    },
    {
      "id": "d6b821ab-aca3-4a71-94c1-9fd2a3459a41",
      "name": "실시간 진행상황 UI 컴포넌트 구현",
      "description": "작명 진행상황을 실시간으로 표시하는 UI 컴포넌트를 구현합니다. 모바일 최적화와 애니메이션을 포함합니다.",
      "status": "in_progress",
      "dependencies": [
        {
          "taskId": "8198d1a3-d4e0-4ec9-8903-d216f7b130b8"
        }
      ],
      "createdAt": "2025-08-13T06:04:08.805Z",
      "updatedAt": "2025-08-14T01:36:26.009Z",
      "relatedFiles": [
        {
          "path": "app/components/realtime/NamingProgress.tsx",
          "type": "CREATE",
          "description": "진행상황 컴포넌트"
        },
        {
          "path": "app/components/layout/ResponsiveCard.tsx",
          "type": "REFERENCE",
          "description": "카드 레이아웃 재사용"
        },
        {
          "path": "app/store/realtime.store.ts",
          "type": "REFERENCE",
          "description": "실시간 상태"
        }
      ],
      "implementationGuide": "1. app/components/realtime/NamingProgress.tsx 생성\n2. 진행 단계별 UI 구성 (Stepper 패턴)\n3. Framer Motion 활용 애니메이션\n4. 스켈레톤 로딩 상태\n5. 에러 상태 표시\n6. pseudocode:\n   - const { progress } = useRealtimeStore()\n   - const steps = ['사주 분석', 'AI 생성', '평가', '완료']\n   - AnimatePresence for smooth transitions\n   - ProgressBar with percentage\n7. 모바일 반응형 디자인",
      "verificationCriteria": "진행상황이 실시간으로 부드럽게 업데이트되고, 모바일에서도 최적화되어 표시되어야 함",
      "analysisResult": "Remix 기반 사주 작명 플랫폼에 Socket.IO를 통합하여 실시간 기능을 구현합니다. AI 작명 진행상황 표시, 대기열 관리, 실시간 피드백을 제공하며, 기존 아키텍처와 완벽히 통합됩니다."
    },
    {
      "id": "3a921131-532e-42c7-aa6b-0846c1e7177f",
      "name": "대기열 관리 시스템 구현",
      "description": "다중 사용자 동시 요청 시 대기열을 관리하고 순서를 표시하는 시스템을 구현합니다. Redis를 활용한 큐 관리를 포함합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "fbc03b1c-fb4c-4efb-85f3-bc88086f8f92"
        }
      ],
      "createdAt": "2025-08-13T06:04:08.805Z",
      "updatedAt": "2025-08-13T06:04:08.805Z",
      "relatedFiles": [
        {
          "path": "app/socket/queue/manager.ts",
          "type": "CREATE",
          "description": "큐 매니저"
        },
        {
          "path": "app/components/realtime/QueueStatus.tsx",
          "type": "CREATE",
          "description": "대기열 UI"
        },
        {
          "path": ".env",
          "type": "REFERENCE",
          "description": "Redis 설정"
        }
      ],
      "implementationGuide": "1. app/socket/queue/manager.ts 생성\n2. Redis 기반 큐 구조 구현 (Bull 라이브러리 고려)\n3. 대기 순서 계산 로직\n4. 예상 대기 시간 알고리즘\n5. pseudocode:\n   - class QueueManager { add, process, getPosition }\n   - redis.lpush('naming:queue', userId)\n   - broadcastQueueUpdate()\n   - processNext() with rate limiting\n6. 우선순위 큐 옵션",
      "verificationCriteria": "대기열이 순서대로 처리되고, 각 사용자에게 정확한 대기 순서가 표시되어야 함",
      "analysisResult": "Remix 기반 사주 작명 플랫폼에 Socket.IO를 통합하여 실시간 기능을 구현합니다. AI 작명 진행상황 표시, 대기열 관리, 실시간 피드백을 제공하며, 기존 아키텍처와 완벽히 통합됩니다."
    },
    {
      "id": "a7375a40-ecf0-4f5b-90a6-8ef8a94c323a",
      "name": "모바일 배터리 최적화 구현",
      "description": "모바일 환경에서 배터리 소모를 최소화하는 최적화를 구현합니다. 백그라운드 처리와 적응형 폴링을 포함합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "b9b0ebec-d052-48c6-a90f-59eddd7bd485"
        }
      ],
      "createdAt": "2025-08-13T06:04:08.805Z",
      "updatedAt": "2025-08-13T06:04:08.805Z",
      "relatedFiles": [
        {
          "path": "app/hooks/useBatteryOptimization.ts",
          "type": "CREATE",
          "description": "배터리 최적화"
        },
        {
          "path": "app/hooks/useSocket.ts",
          "type": "TO_MODIFY",
          "description": "최적화 통합"
        }
      ],
      "implementationGuide": "1. app/hooks/useBatteryOptimization.ts 생성\n2. Battery Status API 활용\n3. 백그라운드 감지 (Page Visibility API)\n4. 적응형 폴링 간격 조정\n5. pseudocode:\n   - navigator.getBattery().then(battery => {})\n   - document.addEventListener('visibilitychange', handleVisibility)\n   - if (battery.level < 0.2) reducePollingFrequency()\n   - socket.io.reconnectionDelay = adaptive\n6. 저전력 모드 UI 표시",
      "verificationCriteria": "배터리 잔량에 따라 연결 전략이 조정되고, 백그라운드에서 불필요한 연결이 중단되어야 함",
      "analysisResult": "Remix 기반 사주 작명 플랫폼에 Socket.IO를 통합하여 실시간 기능을 구현합니다. AI 작명 진행상황 표시, 대기열 관리, 실시간 피드백을 제공하며, 기존 아키텍처와 완벽히 통합됩니다."
    },
    {
      "id": "56950f54-7be8-43c5-b36f-db71bfc8eccd",
      "name": "실시간 기능 통합 테스트 작성",
      "description": "Socket.IO 연결과 실시간 기능의 통합 테스트를 작성합니다. E2E 테스트와 단위 테스트를 포함합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "d6b821ab-aca3-4a71-94c1-9fd2a3459a41"
        },
        {
          "taskId": "3a921131-532e-42c7-aa6b-0846c1e7177f"
        }
      ],
      "createdAt": "2025-08-13T06:04:08.805Z",
      "updatedAt": "2025-08-13T06:04:08.805Z",
      "relatedFiles": [
        {
          "path": "tests/realtime/socket.test.ts",
          "type": "CREATE",
          "description": "Socket 테스트"
        },
        {
          "path": "tests/e2e/realtime.spec.ts",
          "type": "CREATE",
          "description": "E2E 테스트"
        },
        {
          "path": "package.json",
          "type": "TO_MODIFY",
          "description": "테스트 스크립트 추가"
        }
      ],
      "implementationGuide": "1. tests/realtime/socket.test.ts 생성\n2. Socket.IO Mock 서버 설정\n3. 연결/재연결 테스트\n4. 이벤트 송수신 테스트\n5. 대기열 시나리오 테스트\n6. pseudocode:\n   - describe('Socket Connection', () => {})\n   - test('auto reconnect on disconnect')\n   - test('queue position updates')\n   - test('naming progress events')\n7. Playwright E2E 테스트",
      "verificationCriteria": "모든 실시간 기능 테스트가 통과하고, 네트워크 장애 시나리오도 정상 처리되어야 함",
      "analysisResult": "Remix 기반 사주 작명 플랫폼에 Socket.IO를 통합하여 실시간 기능을 구현합니다. AI 작명 진행상황 표시, 대기열 관리, 실시간 피드백을 제공하며, 기존 아키텍처와 완벽히 통합됩니다."
    }
  ]
}