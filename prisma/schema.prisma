generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  phone         String?
  avatarUrl     String?        @map("avatar_url")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  favorites     Favorite[]
  namingResults NamingResult[]
  sajuData      SajuData[]
  sessions      UserSession[]

  @@map("users")
}

model SajuData {
  id               String         @id @default(uuid())
  userId           String         @map("user_id")
  name             String
  birthDate        DateTime       @map("birth_date")
  birthTime        String         @map("birth_time")
  isLunar          Boolean        @default(false) @map("is_lunar")
  gender           String
  yearGan          String         @map("year_gan")
  yearJi           String         @map("year_ji")
  monthGan         String         @map("month_gan")
  monthJi          String         @map("month_ji")
  dayGan           String         @map("day_gan")
  dayJi            String         @map("day_ji")
  hourGan          String         @map("hour_gan")
  hourJi           String         @map("hour_ji")
  woodCount        Int            @map("wood_count")
  fireCount        Int            @map("fire_count")
  earthCount       Int            @map("earth_count")
  metalCount       Int            @map("metal_count")
  waterCount       Int            @map("water_count")
  primaryYongsin   String?        @map("primary_yongsin")
  secondaryYongsin String?        @map("secondary_yongsin")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  namingResults    NamingResult[]
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saju_data")
}

model NamingResult {
  id               String     @id @default(uuid())
  userId           String     @map("user_id")
  sajuDataId       String     @map("saju_data_id")
  lastName         String     @map("last_name")
  firstName        String     @map("first_name")
  fullName         String     @map("full_name")
  lastNameHanja    String?    @map("last_name_hanja")
  firstNameHanja   String?    @map("first_name_hanja")
  totalStrokes     Int        @map("total_strokes")
  balanceScore     Float      @map("balance_score")
  soundScore       Float      @map("sound_score")
  meaningScore     Float      @map("meaning_score")
  overallScore     Float      @map("overall_score")
  generationMethod String     @map("generation_method")
  aiModel          String?    @map("ai_model")
  aiPrompt         String?    @map("ai_prompt")
  preferredValues  Json?      @map("preferred_values")
  notes            String?
  createdAt        DateTime   @default(now()) @map("created_at")
  favorites        Favorite[]
  sajuData         SajuData   @relation(fields: [sajuDataId], references: [id], onDelete: Cascade)
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sajuDataId])
  @@map("naming_results")
}

model Favorite {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  namingResultId String       @map("naming_result_id")
  rating         Int?
  comment        String?
  createdAt      DateTime     @default(now()) @map("created_at")
  namingResult   NamingResult @relation(fields: [namingResultId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, namingResultId])
  @@map("favorites")
}

model HanjaDict {
  id             String       @id @default(uuid())
  character      String       @unique
  meaning        String?
  strokes        Int?
  element        Element?
  yinYang        YinYang?     @map("yin_yang")
  review         ReviewStatus @default(ok)
  evidenceJSON   String?      @map("evidence_json")
  decidedBy      String?      @map("decided_by")
  ruleset        String?
  codepoint      Int?
  koreanReading  String?      @map("korean_reading")
  chineseReading String?      @map("chinese_reading")
  radical        String?
  usageFrequency Int?         @default(0) @map("usage_frequency")
  nameFrequency  Int?         @default(0) @map("name_frequency")
  category       String?
  gender         String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@index([element])
  @@index([strokes])
  @@index([usageFrequency], map: "usage_frequency_idx")
  @@map("hanja_dict")
}

model HanjaReading {
  id        Int      @id @default(autoincrement())
  character String
  reading   String
  soundElem Element? @map("sound_elem")
  isPrimary Boolean  @default(false) @map("is_primary")

  @@unique([character, reading])
  @@index([reading])
  @@map("hanja_reading")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

enum Element {
  METAL @map("金")
  WOOD  @map("木")
  WATER @map("水")
  FIRE  @map("火")
  EARTH @map("土")
}

enum YinYang {
  YIN  @map("음")
  YANG @map("양")
}

enum ReviewStatus {
  ok
  needs_review
}
